@page "/products/create"
@using Microsoft.EntityFrameworkCore
@using OnlinePharmacy.Domain
@inject IDbContextFactory<OnlinePharmacy.Data.OnlinePharmacyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Product</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="prod_name" class="form-label">Prod_Name:</label> 
                <InputText id="prod_name" @bind-Value="Product.Prod_Name" class="form-control" /> 
                <ValidationMessage For="() => Product.Prod_Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="prod_type" class="form-label">Prod_Type:</label> 
                <InputText id="prod_type" @bind-Value="Product.Prod_Type" class="form-control" /> 
                <ValidationMessage For="() => Product.Prod_Type" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="cost" class="form-label">Cost:</label> 
                <InputText id="cost" @bind-Value="Product.Cost" class="form-control" /> 
                <ValidationMessage For="() => Product.Cost" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label> 
                <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" /> 
                <ValidationMessage For="() => Product.Quantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="shopid" class="form-label">ShopId:</label> 
                <InputNumber id="shopid" @bind-Value="Product.ShopId" class="form-control" /> 
                <ValidationMessage For="() => Product.ShopId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Product.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Product.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Product.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Product.UpdatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Product.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Product.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Product.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Product.DateUpdated" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Product Product { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Product.Add(Product);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }
}
